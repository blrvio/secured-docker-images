name: Build, Scan and Push Docker Images

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions: write-all
    continue-on-error: true # Continue mesmo se uma etapa falhar

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Node / Builda a imagem
      - name: Build Node image
        run: docker build -t ghcr.io/${{ github.repository }}/node:latest ./images/node

      - name: Run Trivy vulnerability scanner on Node image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "ghcr.io/${{ github.repository }}/node:latest"
          exit-code: "1" # O fluxo de trabalho falhará se uma vulnerabilidade for encontrada
      # Executa testes na imagem
      - name: Build Node image
        run: docker build -t ghcr.io/${{ github.repository }}-test/node:latest ./images/node/test

      - name: Run Docker container
        run: docker run -d -p 3000:3000 ghcr.io/${{ github.repository }}-test/node:latest

      - name: Make CURL requests to test the app
        run: |
          sleep 5  # give some time for the app to start
          status_code=$(curl -o /dev/null -s -w "%{http_code}\n" http://localhost:3000/healthcheck)
          if [ "$status_code" -ne 200 ]; then
            echo "Healthcheck failed with status code $status_code"
            exit 1
          fi
          # Add more curl commands to test different endpoints

      # Envia a imagem para o GitHub Container Registry
      - name: Push Node image
        if: ${{ success() }} # Só faz push se o escaneamento do Trivy for bem-sucedido
        run: docker push ghcr.io/${{ github.repository }}/node:latest

      # Python
      - name: Build Python image
        run: docker build -t ghcr.io/${{ github.repository }}/python:latest ./images/python

      - name: Run Trivy vulnerability scanner on Python image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "ghcr.io/${{ github.repository }}/python:latest"
          exit-code: "1" # O fluxo de trabalho falhará se uma vulnerabilidade for encontrada

      - name: Push Python image
        if: ${{ success() }} # Só faz push se o escaneamento do Trivy for bem-sucedido
        run: docker push ghcr.io/${{ github.repository }}/python:latest

      # Java
      - name: Build Java image
        run: docker build -t ghcr.io/${{ github.repository }}/java:latest ./images/java

      - name: Run Trivy vulnerability scanner on Java image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "ghcr.io/${{ github.repository }}/java:latest"
          exit-code: "1" # O fluxo de trabalho falhará se uma vulnerabilidade for encontrada

      - name: Push Java image
        if: ${{ success() }} # Só faz push se o escaneamento do Trivy for bem-sucedido
        run: docker push ghcr.io/${{ github.repository }}/java:latest
